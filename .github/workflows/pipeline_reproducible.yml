# CI/CD pipeline
name: pipeline_reproducible

on:
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Here we use a freeze file so we are 100% sure that if there is any failure
  # is because of dymoval itself and not because of some weird dependency
  # stuff
  # We test by downloading ALL the dependencies, including the dev ones.
  pip_tests:
    name: Tests with pip
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]


    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4.6.0
        with:
            python-version: '3.10'

      - name: Formatting source code (black)
        uses: psf/black@stable
        with:
            src: "./src/dymoval"

      - name: Install dependencies (pip)
        run: |
          python -m pip install -r pip_freeze_py310.txt
          python -m pip install .

      - name: Run tests (flake8, mypy, pytest, sphinx)
        run: |
          flake8 .
          mypy .
          coverage run -m pytest .
          cd docs
          make clean
          sphinx-apidoc -f -n -o ./docs/source ../src/dymoval/
          make html
          cd ..

      - name: Build wheel and sdist (hatch)
        run: |
          python -m pip install .[build]
          hatch build

  conda_tests:
    # While pip uses pip freeze, here we tests dymoval with the latest
    # version of the dependencies.
    # In environment.yml no version is specified whereas in
    # environment_locked.yml the version is specified.
    # We test by downloading ALL the dependencies, including the dev ones.
    name: Tests with conda/mamba
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.10"
          mamba-version: "*"
          channels: conda-forge,defaults
          channel-priority: true
          # environment.yml has no version specified so it will pick the last
          # one.
          environment-file: ./environment_locked_py310.yml

      - name: (bash) Install dymoval through pip (unfortunately)
        shell: bash -l {0}
        run: |
          python -m pip install .

      - name: Formatting source code (black)
        uses: psf/black@stable
        with:
            src: "./src/dymoval"

      - name: (bash) Run all the tests on bash (flake8, mypy, pytest, sphinx)
        shell: bash -l {0}
        run: |
          flake8 .
          mypy .
          coverage run -m pytest .
          cd docs
          make clean
          sphinx-apidoc -f -n -o ./docs/source ../src/dymoval/
          make html

      - name: (powershell) Install dymoval through pip (unfortunately)
        shell: pwsh
        run: |
          python -m pip install .

      - name: Formatting source code (black)
        uses: psf/black@stable
        with:
            src: "./src/dymoval"

      - name: (powershell) Run all the tests on Powershell (flake8, mypy, pytest, sphinx)
        shell: pwsh
        run: |
          flake8 .
          mypy .
          coverage run -m pytest .
          cd docs
          make clean
          sphinx-apidoc -f -n -o ./docs/source ../src/dymoval/
          make html
