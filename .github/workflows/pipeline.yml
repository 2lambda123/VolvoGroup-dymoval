# CI/CD pipeline
name: pipeline 

on: 
  push:
  pull_request:
    branches:
    - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # Tests on all platforms
  pip_tests:
    name: Tests with pip
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4.5.0
        with:
            python-version: '3.10'
        
      - name: Formatting source code (black)
        uses: psf/black@stable
        
      - name: Install dependencies (pip)
        run: |
          python -m pip install .
          
      - name: Run tests (flake8, mypy, pytest, sphinx)
        run: |
          flake8 .
          mypy .
          coverage run -m pytest .
          cd docs
          make clean
          sphinx-apidoc -f -n -o ./docs/source ../src/dymoval/
          make html
          cd ..

      - name: Build wheel and sdist (hatch)
        run: |
          python -m pip install .[build]
          hatch build

  mamba_tests:
    name: Tests with conda/mamba
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.10"
          mamba-version: "*"
          channels: conda-forge,defaults
          channel-priority: true
          environment-file: ./environment.yml
          
      - name: Formatting source code (black)
        uses: psf/black@stable
        
      - name: Run all the tests on bash (flake8, mypy, pytest, sphinx)
        shell: bash -l {0}
        run: |
          python -m pip install .
          flake8 .
          mypy .
          coverage run -m pytest .
          cd docs
          make clean
          sphinx-apidoc -f -n -o ./docs/source ../src/dymoval/
          make html
      
      - name: Run all the tests on Powershell (flake8, mypy, pytest, sphinx)
        shell: pwsh
        run: |
          python -m pip install .
          flake8 .
          mypy .
          coverage run -m pytest .
          cd docs
          make clean
          sphinx-apidoc -f -n -o ./docs/source ../src/dymoval/
          make html
          
  docs:
    # Build doc and push to gh-pages
    name: Docs
    runs-on: ubuntu-latest   
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4.5.0
        with:
            python-version: '3.10'


      - name: Build docs (sphinx)
        run: |
          python -m pip install .
          cd docs
          make clean
          sphinx-apidoc -f -n -o ./docs/source ../src/dymoval/
          make html
          cd ..
          
      - name: Init new repo in dist folder and commit generated files
        run: |
          cd docs/build/html/
          git init
          touch .nojekyll
          git add -A
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "deploy"
      
      - name: Force push to destination branch
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN}}
          branch: gh-pages
          force: true
          directory: ./docs/build/html

      - name: Run test for generating .coverage file
        run: |
          coverage run --source=dymoval --branch -m pytest
          coverage report -m

      - name: Coverage Badge
        uses: tj-actions/coverage-badge-py@v1.8

      - name: Verify Changed files
        uses: tj-actions/verify-changed-files@v12.0
        id: changed_files
        with:
          files: coverage.svg

      - name: Commit files
        if: steps.changed_files.outputs.files_changed == 'true'
        run: |
          rm .coverage
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add coverage.svg
          git commit -m "Updated coverage.svg"

      - name: Push changes
        if: steps.changed_files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.github_token }}
          branch: ${{ github.ref }}
        
